name: Build

on:
  pull_request:
  push:
    tags:

jobs:
  # macos:
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9
  #         architecture: x64
  #     - uses: dtolnay/rust-toolchain@stable
  #     - name: Build wheels - x86_64
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: x86_64
  #         args: --release --out dist --sdist -m python/Cargo.toml
  #     - name: Install built wheel - x86_64
  #       run: |
  #         pip install crfs --no-index --find-links dist --force-reinstall
  #         python -c "import crfs"
  #     - name: Build wheels - universal2
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         args: --release --universal2 --out dist -m python/Cargo.toml
  #     - name: Install built wheel - universal2
  #       run: |
  #         pip install crfs --no-index --find-links dist --force-reinstall
  #         python -c "import crfs"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        target: [x64, x86]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.target }}
    - name: Install poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: 1.3.2
    - uses: dtolnay/rust-toolchain@stable
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --interpreter ${{ matrix.python-version }} --release --out dist
    - name: Install built wheel
      run: |
        # Install built package directly from whl and check we can import it
        pip install dist/*.whl
        python -c "import docleaf"
    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        target: [x86_64, i686]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
    - name: Install poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: 1.3.2
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy,rustfmt
    - name: Rust formatting
      run: |
        cd rust
        cargo fmt --check
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: --interpreter ${{ matrix.python-version }} --release --out dist
    - name: Install built wheel
      if: matrix.target == 'x86_64'
      run: |
        # Install built package directly from whl and check we can import it
        pip install dist/*.whl
        python -c "import docleaf"
    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: dist

  # linux-cross:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target: [aarch64, armv7, s390x, ppc64le, ppc64]
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-python@v4
  #     with:
  #       python-version: 3.9
  #   - name: Build wheels
  #     uses: PyO3/maturin-action@v1
  #     with:
  #       target: ${{ matrix.target }}
  #       manylinux: auto
  #       args: --release --out dist -m python/Cargo.toml
  #   - uses: uraimo/run-on-arch-action@v2.5.0
  #     if: matrix.target != 'ppc64'
  #     name: Install built wheel
  #     with:
  #       arch: ${{ matrix.target }}
  #       distro: ubuntu20.04
  #       githubToken: ${{ github.token }}
  #       install: |
  #         apt-get update
  #         apt-get install -y --no-install-recommends python3 python3-pip
  #         pip3 install -U pip
  #       run: |
  #         pip3 install crfs --no-index --find-links dist/ --force-reinstall
  #         python3 -c "import crfs"
  #   - name: Upload wheels
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: wheels
  #       path: dist

  # musllinux:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target:
  #         - x86_64-unknown-linux-musl
  #         - i686-unknown-linux-musl
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-python@v4
  #     with:
  #       python-version: 3.9
  #       architecture: x64
  #   - name: Build wheels
  #     uses: PyO3/maturin-action@v1
  #     with:
  #       target: ${{ matrix.target }}
  #       manylinux: musllinux_1_2
  #       args: --release --out dist -m python/Cargo.toml
  #   - name: Install built wheel
  #     if: matrix.target == 'x86_64-unknown-linux-musl'
  #     uses: addnab/docker-run-action@v3
  #     with:
  #       image: alpine:latest
  #       options: -v ${{ github.workspace }}:/io -w /io
  #       run: |
  #         apk add py3-pip
  #         pip3 install -U pip
  #         pip3 install crfs --no-index --find-links /io/dist/ --force-reinstall
  #         python3 -c "import crfs"
  #   - name: Upload wheels
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: wheels
  #       path: dist

  # musllinux-cross:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       platform:
  #         - target: aarch64-unknown-linux-musl
  #           arch: aarch64
  #         - target: armv7-unknown-linux-musleabihf
  #           arch: armv7
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-python@v4
  #     with:
  #       python-version: 3.9
  #   - name: Build wheels
  #     uses: PyO3/maturin-action@v1
  #     with:
  #       target: ${{ matrix.platform.target }}
  #       manylinux: musllinux_1_2
  #       args: --release --out dist -m python/Cargo.toml
  #   - uses: uraimo/run-on-arch-action@v2.5.0
  #     name: Install built wheel
  #     with:
  #       arch: ${{ matrix.platform.arch }}
  #       distro: alpine_latest
  #       githubToken: ${{ github.token }}
  #       install: |
  #         apk add py3-pip
  #         pip3 install -U pip
  #       run: |
  #         pip3 install crfs --no-index --find-links dist/ --force-reinstall
  #         python3 -c "import crfs"
  #   - name: Upload wheels
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: wheels
  #       path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    # needs: [ macos, windows, linux, linux-cross, musllinux, musllinux-cross ]
    needs: [ linux ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
