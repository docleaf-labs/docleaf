"""
This script is responsible for assembling the THIRD_PARTY_LICENSES file which goes into the wheel file. As we are 
distributing compiled Rust crates we should include their licenses in the distribution. This isn't necessary for Python
dependencies as pip will pull those in on the client machine. Equally cargo would do it for any Rust code using our
Rust code. But as we have pip pulling in compiled Rust code then we need to handle it in some fashion.
"""

import subprocess
import json
import sys


mit_license = """
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
""".strip()

header = """
Third Party Licenses
====================

This file contains all the open source licenses for the Rust crates that
Docleaf depends on. It has been created so that it is bundled into the 
wheel so that the licenses are appropriately distributed with the compiled
code.

This file is generated by 'rust/script/licenses.py' and placed here so that
it is picked up and package by maturin. See: 

    https://github.com/PyO3/maturin/pull/862
""".strip()

allowed_licenses = ["MIT", "Apache-2.0"]


def extract_license_text(licenses):
    for allowed_license in allowed_licenses:
        for license in licenses:
            type = license["license"].strip()
            if type == allowed_license:
                text = license["text"].strip()

                # If 'cargo bundle-licenses' has not found the MIT text then insert ourselves
                if text == "NOT FOUND":
                    if type == "MIT":
                        text = mit_license
                    else:
                        break

                # Remove windows line endings otherwise they mess up checks later on
                return text.replace("\r", "")


def main(args):

    if not args:
        print("Usage: licenses.py <mode>", file=sys.stderr)
        return 1

    mode = args[0]

    if mode not in ["generate", "check"]:
        print(f"Invalid mode '{mode}' - must be one of: generate, check", file=sys.stderr)
        return 1

    output = subprocess.run(["cargo", "bundle-licenses", "--format", "json"], capture_output=True)
    stdout = output.stdout  # .decode("utf8")
    data = json.loads(stdout)

    license_contents = []

    package_lookup = {}
    for entry in data["third_party_libraries"]:
        package_name = entry["package_name"]
        package_lookup[package_name] = entry

    package_names = sorted(package_lookup.keys())

    for package_name in package_names:
        entry = package_lookup[package_name]
        package_version = entry["package_version"]
        title = f"{package_name} ({package_version})"
        license_contents.append(title)
        license_contents.append("=" * len(title))
        license_contents.append("")

        license_text = extract_license_text(entry["licenses"])

        if license_text is None:
            print(f"Failed to find license for {package_name}", file=sys.stderr)
            return 1
        else:
            license_contents.append(license_text)
            license_contents.append("")
            license_contents.append("")

    content = header + "\n\n\n" + "\n".join(license_contents)

    if mode == "generate":
        # Write to license file
        open("../LICENSES_THIRD_PARTY.md", "w").write(content)
    elif mode == "check":
        current_contents = open("../LICENSES_THIRD_PARTY.md").read()

        if current_contents == content:
            print("LICENSES_THIRD_PARTY.md is up to date")
            return 0
        else:
            print("LICENSES_THIRD_PARTY.md is out of sync. Please update it.")
            return 1

    return 0


sys.exit(main(sys.argv[1:]))
